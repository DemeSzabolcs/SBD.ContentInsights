{"version":3,"file":"user-contributions-teYZQLQI.js","sources":["../../client/src/dashboards/user-contributions/charts/bar-chart.ts","../../client/src/dashboards/user-contributions/user-contributions.ts"],"sourcesContent":["import { getAuthorDocumentCounts } from '../../../shared/utils';\r\nimport { createGenericBarChart, resetChart } from '../../../shared/charts/bar-chart';\r\nimport type { ChartState } from '../../../shared/charts/bar-chart';\r\nimport { Chart } from 'chart.js';\r\nimport type { DocumentsWithAuthors } from '../../../api';\r\n\r\nlet originalDocumentsWithAuthors: DocumentsWithAuthors | null = null;\r\nlet savedDocumentsWithAuthors: DocumentsWithAuthors | null = null;\r\nlet authorChartState: ChartState | null = null;\r\nlet currentSelect: string;\r\n\r\nexport function createAuthorBarChart(\r\n    barChartCtx: HTMLCanvasElement,\r\n    documentsWithAuthors: DocumentsWithAuthors\r\n): { barChart: Chart } {\r\n    const labels = documentsWithAuthors.authors.map(author => author.name);\r\n    const data = getAuthorDocumentCounts(documentsWithAuthors);\r\n\r\n    originalDocumentsWithAuthors = { documents: [], authors: [] } as DocumentsWithAuthors;\r\n    originalDocumentsWithAuthors.documents = [...documentsWithAuthors.documents];\r\n    originalDocumentsWithAuthors.authors = [...documentsWithAuthors.authors];\r\n\r\n    savedDocumentsWithAuthors = { documents: [], authors: [] } as DocumentsWithAuthors;\r\n    savedDocumentsWithAuthors.documents = [...documentsWithAuthors.documents];\r\n    savedDocumentsWithAuthors.authors = [...documentsWithAuthors.authors];\r\n\r\n\r\n    authorChartState = createGenericBarChart(barChartCtx, labels, data, (_, index) => {\r\n        if (!savedDocumentsWithAuthors) return;\r\n\r\n        savedDocumentsWithAuthors.authors.splice(index, 1);\r\n    });\r\n\r\n    return { barChart: authorChartState.chart };\r\n}\r\n\r\nexport function updateAuthorBarChart(selectedType: string): void {\r\n    if (!authorChartState || !savedDocumentsWithAuthors) return;\r\n    currentSelect = selectedType;\r\n    const data =\r\n        selectedType === 'all'\r\n            ? getAuthorDocumentCounts(savedDocumentsWithAuthors)\r\n            : getAuthorDocumentCounts(savedDocumentsWithAuthors, selectedType);\r\n\r\n    authorChartState.chart.data.datasets[0].data = [...data];\r\n    authorChartState.chart.update();\r\n}\r\n\r\nexport function resetAuthorBarChart(): void {\r\n    if (!authorChartState) return;\r\n    resetChart(authorChartState);\r\n\r\n    if (!savedDocumentsWithAuthors || !originalDocumentsWithAuthors ) return;\r\n    savedDocumentsWithAuthors.authors = [...originalDocumentsWithAuthors.authors];\r\n    savedDocumentsWithAuthors.documents = [...originalDocumentsWithAuthors.documents];\r\n    updateAuthorBarChart(currentSelect);\r\n}\r\n","// External libraries.\r\nimport { html } from 'lit';\r\nimport { customElement, state } from 'lit/decorators.js';\r\nimport { Chart, registerables } from 'chart.js';\r\n\r\n// Umbraco backoffice modules.\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\n\r\n// Types, API.\r\nimport { getUmbracoManagementApiV1ContentInsightsGetAllDocumentsWithAuthors, getUmbracoManagementApiV1ContentInsightsGetDocumentTypes, } from '../../api';\r\nimport type { DocumentsWithAuthors } from '../../api';\r\n\r\n// Shared utilities, constants.\r\nimport { createAuthorBarChart, resetAuthorBarChart, updateAuthorBarChart } from './charts/bar-chart';\r\nimport { renderDocumentsTable, onSort, onPageChange, filterDocumentTypes } from '../../shared/render/documents-table';\r\nimport type { DocumentsTableState } from '../../shared/render/documents-table';\r\nimport { renderDashboardError } from '../../shared/render/error';\r\nimport { buildDocumentTypeSelectOptions, onItemsPerPageChange } from '../../shared/utils';\r\n\r\n// Styles.\r\nimport { generalStyles } from '../../styles/general.styles';\r\n\r\nChart.register(...registerables);\r\n\r\n@customElement('user-contributions')\r\nexport class UserContributions extends UmbLitElement {\r\n    @state() private documentsTableState: DocumentsTableState = {\r\n        documentsWithAuthors: { documents: [], authors: [] } as DocumentsWithAuthors,\r\n        filteredDocumentCount: 0,\r\n        currentPage: 1,\r\n        itemsPerPage: 10,\r\n        sortColumn: null,\r\n        sortDescending: false,\r\n    };\r\n\r\n    @state() private documentTypeSelectOptions: Option[] = [];\r\n    @state() private hasError: boolean = false;\r\n\r\n    private handleDocumentTypeSelectChange(event: Event) {\r\n        const select = event.target as HTMLSelectElement;\r\n        const selectValue = select.value;\r\n        filterDocumentTypes(selectValue, this.documentsTableState);\r\n        updateAuthorBarChart(selectValue);\r\n        this.documentsTableState.currentPage = 1;\r\n        this.requestUpdate();\r\n    }\r\n\r\n    render() {\r\n        if (this.hasError) {\r\n            return renderDashboardError();\r\n        }\r\n\r\n        return html`\r\n    <uui-box class=\"dashboard\">\r\n        <div class=\"dashboard-flex\">\r\n            <div class=\"dashboard-section\">\r\n                <div class=\"section-header\">\r\n                    <uui-icon name=\"icon-users\" class=\"uii-icon\"></uui-icon>\r\n                    <h2>Document count by Users</h2>\r\n                </div>\r\n                <div>\r\n                    <p>\r\n                    In case of public and trashed documents, the user is the person who last published the document.\r\n                    </br>\r\n                    In case of draft documents, the user is the person who last edited the document.\r\n                    </p>\r\n                </div>\r\n                <div class=\"reset-button\">\r\n                    <p>Click on the bars to remove them, click on reset to reset the chart.</p>\r\n                    <uui-button type=\"button\" look=\"primary\" color=\"danger\" label=\"Reset\" @click=${resetAuthorBarChart}></uui-button>\r\n                </div>\r\n                <div class=\"select-container\">\r\n                    <uui-select class=\"document-type-select\" id=\"documentTypeSelect\" label=\"documentTypeSelect\" .options=${this.documentTypeSelectOptions} @change=${this.handleDocumentTypeSelectChange}></uui-select>\r\n                </div>\r\n                <uui-box class=\"chart-box bar-chart\">\r\n                    <canvas id=\"documentsByUsersChart\"></canvas>\r\n                </uui-box>\r\n            </div>\r\n        </div>\r\n      ${renderDocumentsTable(\r\n            this.documentsTableState,\r\n            (column) => this.documentsTableState = onSort(this.documentsTableState, column),\r\n            (event) => this.documentsTableState = onPageChange(this.documentsTableState, event),\r\n            (event) => this.documentsTableState = onItemsPerPageChange(this.documentsTableState, event)\r\n        )}\r\n    </uui-box>\r\n    `\r\n    }\r\n\r\n    async firstUpdated() {\r\n\r\n        const { data: documentsWithAuthorsData, error: documentsWithAuthorsError } = await getUmbracoManagementApiV1ContentInsightsGetAllDocumentsWithAuthors();\r\n\r\n        if (documentsWithAuthorsError || !documentsWithAuthorsData?.documents || !documentsWithAuthorsData?.authors) {\r\n            this.hasError = true;\r\n            console.error(documentsWithAuthorsError);\r\n            return;\r\n        }\r\n\r\n        const { data: documentTypes, error: documentTypesError } = await getUmbracoManagementApiV1ContentInsightsGetDocumentTypes();\r\n\r\n        if (documentTypesError || !documentTypes) {\r\n            this.hasError = true;\r\n            console.error(documentTypesError);\r\n            return;\r\n        }\r\n\r\n        this.documentTypeSelectOptions = buildDocumentTypeSelectOptions(documentTypes);\r\n\r\n        const barChartCtx = this.renderRoot.querySelector('#documentsByUsersChart') as HTMLCanvasElement;\r\n        createAuthorBarChart(barChartCtx, documentsWithAuthorsData);\r\n\r\n        this.documentsTableState = {\r\n            ...this.documentsTableState,\r\n            documentsWithAuthors: documentsWithAuthorsData\r\n        };\r\n    }\r\n\r\n    static styles = generalStyles;\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        'user-contributions': UserContributions\r\n    }\r\n}\r\n"],"names":["originalDocumentsWithAuthors","savedDocumentsWithAuthors","authorChartState","currentSelect","createAuthorBarChart","barChartCtx","documentsWithAuthors","labels","author","data","getAuthorDocumentCounts","createGenericBarChart","_","index","updateAuthorBarChart","selectedType","resetAuthorBarChart","resetChart","Chart","registerables","UserContributions","UmbLitElement","event","selectValue","filterDocumentTypes","renderDashboardError","html","renderDocumentsTable","column","onSort","onPageChange","onItemsPerPageChange","documentsWithAuthorsData","documentsWithAuthorsError","getUmbracoManagementApiV1ContentInsightsGetAllDocumentsWithAuthors","documentTypes","documentTypesError","getUmbracoManagementApiV1ContentInsightsGetDocumentTypes","buildDocumentTypeSelectOptions","generalStyles","__decorateClass","state","customElement"],"mappings":"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"}