{"version":3,"file":"content-insights-entrypoint-BJxUqE9u.js","sources":["../../client/src/entrypoints/content-insights-entrypoint.ts"],"sourcesContent":["import { type UmbEntryPointOnInit, type UmbEntryPointOnUnload } from '@umbraco-cms/backoffice/extension-api';\r\nimport { UMB_AUTH_CONTEXT } from '@umbraco-cms/backoffice/auth';\r\nimport { umbHttpClient } from '@umbraco-cms/backoffice/http-client';\r\n\r\nexport const onInit: UmbEntryPointOnInit = (_host, _extensionRegistry) => {\r\n    _host.consumeContext(UMB_AUTH_CONTEXT, async (authContext) => {\r\n        if (!authContext) {\r\n            return;\r\n        }\r\n\r\n        const config = authContext.getOpenApiConfiguration();\r\n\r\n        umbHttpClient.setConfig({\r\n            baseUrl: config.base,\r\n            credentials: config.credentials\r\n        });\r\n\r\n        // For every request being made, add the token to the headers\r\n        // Can't use the setConfig approach above as its set only once and\r\n        // tokens expire and get refreshed\r\n        umbHttpClient.interceptors.request.use(async (request, _options) => {\r\n            const token = await config.token();\r\n            request.headers.set('Authorization', `Bearer ${token}`);\r\n            return request;\r\n        });\r\n\r\n    });\r\n};\r\n\r\nexport const onUnload: UmbEntryPointOnUnload = (_host, _extensionRegistry) => {\r\n};\r\n"],"names":["onInit","_host","_extensionRegistry","UMB_AUTH_CONTEXT","authContext","config","umbHttpClient","request","_options","token","onUnload"],"mappings":";;;AAIO,MAAMA,IAA8B,CAACC,GAAOC,MAAuB;AACtE,EAAAD,EAAM,eAAeE,GAAkB,OAAOC,MAAgB;AAC1D,QAAI,CAACA;AACD;AAGJ,UAAMC,IAASD,EAAY,wBAAA;AAE3B,IAAAE,EAAc,UAAU;AAAA,MACpB,SAASD,EAAO;AAAA,MAChB,aAAaA,EAAO;AAAA,IAAA,CACvB,GAKDC,EAAc,aAAa,QAAQ,IAAI,OAAOC,GAASC,MAAa;AAChE,YAAMC,IAAQ,MAAMJ,EAAO,MAAA;AAC3B,aAAAE,EAAQ,QAAQ,IAAI,iBAAiB,UAAUE,CAAK,EAAE,GAC/CF;AAAA,IACX,CAAC;AAAA,EAEL,CAAC;AACL,GAEaG,IAAkC,CAACT,GAAOC,MAAuB;AAC9E;"}